{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Welcome to MkDocs"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"functions/function/","text":"","title":"Function"},{"location":"objects/class/","text":"Classes Classes in C++ are similar to structs, being objects which can contain member variables and member functions. The main difference is that member variables are private by default (important for exams as this can make code that looks valid fail to compile). class MyClass { private: int privateVar; // private by default void privateFunc(); public: int publicVar; void publicFunc(); protected: int protectedVar; }; Constructor Constructors are special member functions used to initialize new objects. Here are key aspects: Constructor Types class Example { public: // Default constructor Example() {} // Parameterized constructor Example(int x) : value(x) {} // Copy constructor Example(const Example& other) : value(other.value) {} private: int value; }; Key Characteristics Must have same name as the class Called automatically when object is created Definition Location // Inside class (common) class Inside { public: Inside() {} }; // Outside class class Outside { public: Outside(); }; Outside::Outside() {} Access Modifiers private Private variables/functions are only accessible to member functions and will cause compiler errors if accessed from outside the class. All members before the first access modifier or after private: are private by default. public Public members are accessible from anywhere the object is visible. Example class Person { private: string name; int age; public: Person(string n, int a) : name(n), age(a) {} void displayInfo() { cout << name << \" is \" << age << \" years old\" << endl; } }; Key Points Members are private by default Constructor can be used to initialize members Member functions can access private members Member Function Definitions Member functions can be defined in two ways: 1. Inside Class Definition class Rectangle { int width, height; public: void setValues(int w, int h) { // Defined inside width = w; height = h; } }; 2. Outside Class Definition class Rectangle { int width, height; public: void setValues(int w, int h); // Declaration only int getArea(); }; // Use ClassName:: to define outside void Rectangle::setValues(int w, int h) { width = w; height = h; } int Rectangle::getArea() { return width * height; } Key Points About Member Functions Outside definitions need the scope resolution operator :: Declaration must be in the class even if defined outside Large functions are typically defined outside for better readability Header files usually contain only declarations Structure / Files C++ classes are typically split into two files: Header File (.h) // MyClass.h class MyClass { int x; public: void func(); // Declaration only }; Contains class declaration Includes member declarations Used in other files that need the class Implementation File (.cpp) // MyClass.cpp #include \"MyClass.h\" void MyClass::func() { // Definition // Implementation here } Contains actual implementations of the classes defined in the .h file Must include corresponding header in the .cpp file Basically never include .cpp files in other files Why do it? Code organization (All definitions are in one place without the implementation makeing them cluttered) Compilation efficiency (doen't need to compile the same code multiple times)","title":"Classes"},{"location":"objects/class/#classes","text":"Classes in C++ are similar to structs, being objects which can contain member variables and member functions. The main difference is that member variables are private by default (important for exams as this can make code that looks valid fail to compile). class MyClass { private: int privateVar; // private by default void privateFunc(); public: int publicVar; void publicFunc(); protected: int protectedVar; };","title":"Classes"},{"location":"objects/class/#constructor","text":"Constructors are special member functions used to initialize new objects. Here are key aspects:","title":"Constructor"},{"location":"objects/class/#constructor-types","text":"class Example { public: // Default constructor Example() {} // Parameterized constructor Example(int x) : value(x) {} // Copy constructor Example(const Example& other) : value(other.value) {} private: int value; };","title":"Constructor Types"},{"location":"objects/class/#key-characteristics","text":"Must have same name as the class Called automatically when object is created","title":"Key Characteristics"},{"location":"objects/class/#definition-location","text":"// Inside class (common) class Inside { public: Inside() {} }; // Outside class class Outside { public: Outside(); }; Outside::Outside() {}","title":"Definition Location"},{"location":"objects/class/#access-modifiers","text":"","title":"Access Modifiers"},{"location":"objects/class/#private","text":"Private variables/functions are only accessible to member functions and will cause compiler errors if accessed from outside the class. All members before the first access modifier or after private: are private by default.","title":"private"},{"location":"objects/class/#public","text":"Public members are accessible from anywhere the object is visible.","title":"public"},{"location":"objects/class/#example","text":"class Person { private: string name; int age; public: Person(string n, int a) : name(n), age(a) {} void displayInfo() { cout << name << \" is \" << age << \" years old\" << endl; } };","title":"Example"},{"location":"objects/class/#key-points","text":"Members are private by default Constructor can be used to initialize members Member functions can access private members","title":"Key Points"},{"location":"objects/class/#member-function-definitions","text":"Member functions can be defined in two ways:","title":"Member Function Definitions"},{"location":"objects/class/#1-inside-class-definition","text":"class Rectangle { int width, height; public: void setValues(int w, int h) { // Defined inside width = w; height = h; } };","title":"1. Inside Class Definition"},{"location":"objects/class/#2-outside-class-definition","text":"class Rectangle { int width, height; public: void setValues(int w, int h); // Declaration only int getArea(); }; // Use ClassName:: to define outside void Rectangle::setValues(int w, int h) { width = w; height = h; } int Rectangle::getArea() { return width * height; }","title":"2. Outside Class Definition"},{"location":"objects/class/#key-points-about-member-functions","text":"Outside definitions need the scope resolution operator :: Declaration must be in the class even if defined outside Large functions are typically defined outside for better readability Header files usually contain only declarations","title":"Key Points About Member Functions"},{"location":"objects/class/#structure-files","text":"C++ classes are typically split into two files:","title":"Structure / Files"},{"location":"objects/class/#header-file-h","text":"// MyClass.h class MyClass { int x; public: void func(); // Declaration only }; Contains class declaration Includes member declarations Used in other files that need the class","title":"Header File (.h)"},{"location":"objects/class/#implementation-file-cpp","text":"// MyClass.cpp #include \"MyClass.h\" void MyClass::func() { // Definition // Implementation here } Contains actual implementations of the classes defined in the .h file Must include corresponding header in the .cpp file Basically never include .cpp files in other files","title":"Implementation File (.cpp)"},{"location":"objects/class/#why-do-it","text":"Code organization (All definitions are in one place without the implementation makeing them cluttered) Compilation efficiency (doen't need to compile the same code multiple times)","title":"Why do it?"},{"location":"pointers/pointers/","text":"","title":"Pointers"}]}